package repository

import (
	"symphony-api/internal/persistence/connectors/postgres"
	"symphony-api/internal/persistence/model"
)

var TABLE_NAME = "USERS"

type UserRepository struct {
	connection postgres.PostgreConnection
}

// NewUserRepository creates a new instance of UserRepository.
// It takes a PostgreConnection as an argument and returns a pointer to UserRepository.
// The UserRepository struct is designed to interact with the USERS table in the PostgreSQL database.
func NewUserRepository(connection postgres.PostgreConnection) *UserRepository {
	return &UserRepository{
		connection: connection,
	}
}

// Put inserts a new user into the USERS table.
// It takes a pointer to a model.User as an argument, converts it to a map,
// and uses the PostgreConnection to insert the data into the database.
// It returns the newly created user with its ID and any error that occurred during the operation.
// The user is expected to have its fields populated, except for the ID which will be generated by the database.
// The method uses the ToMap method of the User model to convert the user data into a map format suitable for insertion.
// The ID of the user is returned after the insertion, allowing the caller to have the complete user object with its ID.
func (repository *UserRepository) Put(user *model.User) (*model.User, error) {
	id, err := repository.connection.Put(user.ToMap(), TABLE_NAME)
	return model.NewUser(
		id,
		user.Username,
		user.Fullname,
		user.Email,
		user.Birth_date,
		user.Telephone,
	), err
}

// get retrieves users from the USERS table based on the provided constraint.
// It takes a map of constraints as an argument, which is used to filter the results.
// The method queries the database using the PostgreConnection's Get method,
// and returns a slice of pointers to model.User instances.
func (repository *UserRepository) get(constraint map[string]any) []*model.User {
	data := repository.connection.Get(constraint, TABLE_NAME)

	users := make([]*model.User, 0)

	for _, user := range data {
		users = append(users, model.MapToUser(user))
	}

	return users
}

// GetById retrieves a user by their ID from the USERS table.
// It takes an int64 userId as an argument and returns a pointer to model.User.
// The method constructs a constraint map with the userId and calls the get method to retrieve the user.
func (repository *UserRepository) GetById(userId int64) *model.User {
	constraint := map[string]any {
		"userId": userId,
	}

	users := repository.get(constraint)
	return users[0]
}

// GetByUsername retrieves a user by their username from the USERS table.
// It takes a string username as an argument and returns a pointer to model.User.
// The method constructs a constraint map with the username and calls the get method to retrieve the user.
func (repository *UserRepository) GetByUsername(username string) *model.User {
	constraint := map[string]any {
		"username": username,
	}

	users := repository.get(constraint)
	return users[0]
}
